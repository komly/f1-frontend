{"version":3,"sources":["serviceWorker.js","types.js","reducers/drivers.js","reducers/index.js","store.js","api.js","components/pages/DriverListPage.js","actions/drivers.js","components/pages/DriverDetailPage.js","index.js"],"names":["Boolean","window","location","hostname","match","LOAD_DRIVERS_REQUEST","LOAD_DRIVERS_SUCCESS","LOAD_DRIVERS_ERROR","LOAD_DRIVER_DETAIL_REQUEST","LOAD_DRIVER_DETAIL_SUCCESS","LOAD_DRIVER_DETAIL_ERROR","initialState","drivers","totalPages","loading","error","driver","races","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","store","createStore","rootReducer","applyMiddleware","thunk","API_URL","process","api","driversList","_driversList","asyncToGenerator","regenerator_default","a","mark","_callee","page","limit","offset","_ref","data","wrap","_context","prev","next","axios","get","concat","sent","Math","ceil","parseInt","MRData","total","abrupt","DriverTable","Drivers","stop","this","_x","apply","loadDriverDetail","_loadDriverDetail","_callee2","driverId","_ref2","_ref3","resultsData","_context2","RaceTable","Races","_x2","DriverListPage","handlePageChange","pageNumber","_this","props","history","push","loadDrivers","getCurrentPage","newProps","params","page_num","_this2","_this$props","currentPage","react_default","createElement","Container","Message","Table","basic","Header","Row","HeaderCell","Body","map","key","Cell","Link","to","givenName","familyName","nationality","href","url","dateOfBirth","Pagination","defaultActivePage","onPageChange","e","target","attributes","value","Component","connect","dispatch","then","catch","message","DriverDetailPage","driver_id","race","raceName","round","season","date","ReactDOM","render","es","BrowserRouter","basename","Menu","secondary","pointing","Item","name","active","as","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01efb968.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const LOAD_DRIVERS_REQUEST = 'LOAD_DRIVERS_REQUEST';\nexport const LOAD_DRIVERS_SUCCESS = 'LOAD_DRIVERS_SUCCESS';\nexport const LOAD_DRIVERS_ERROR = 'LOAD_DRIVERS_ERROR';\n\nexport const LOAD_DRIVER_DETAIL_REQUEST = 'LOAD_DRIVER_DETAIL_REQUEST';\nexport const LOAD_DRIVER_DETAIL_SUCCESS = 'LOAD_DRIVER_DETAIL_SUCCESS';\nexport const LOAD_DRIVER_DETAIL_ERROR = 'LOAD_DRIVER_DETAIL_ERROR';\n","import {\n  LOAD_DRIVERS_REQUEST,\n  LOAD_DRIVERS_SUCCESS,\n  LOAD_DRIVERS_ERROR,\n  LOAD_DRIVER_DETAIL_REQUEST,\n  LOAD_DRIVER_DETAIL_SUCCESS,\n  LOAD_DRIVER_DETAIL_ERROR,\n} from '../types';\n\nconst initialState = {\n  drivers: [],\n  totalPages: 0,\n  loading: false,\n  error: null,\n  driver: null,\n  races: [],\n};\n\nexport default function driversReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_DRIVERS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case LOAD_DRIVERS_SUCCESS:\n      return {\n        ...state,\n        drivers: action.drivers,\n        totalPages: action.totalPages,\n        loading: false,\n      };\n    case LOAD_DRIVERS_ERROR:\n      return {\n        ...state,\n        drivers: action.drivers,\n        loading: false,\n        error: action.error,\n      };\n    case LOAD_DRIVER_DETAIL_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case LOAD_DRIVER_DETAIL_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        driver: action.driver,\n        races: action.races,\n      };\n    case LOAD_DRIVER_DETAIL_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport drivers from './drivers';\n\nexport default combineReducers({\n  drivers,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport default {\n  async driversList(page) {\n    const limit = 10;\n    const offset = (page - 1) * 10;\n    const { data } = await axios.get(API_URL + `f1/drivers.json?limit=${limit}&offset=${offset}`);\n    const totalPages = Math.ceil(parseInt(data.MRData.total, 10) / limit);\n    return {\n      drivers: data.MRData.DriverTable.Drivers,\n      totalPages,\n    };\n  },\n  async loadDriverDetail(driverId) {\n    const { data } = await axios.get(API_URL + `f1/drivers/${driverId}.json`);\n    const { data: resultsData } = await axios.get(API_URL + `f1/drivers/${driverId}/results.json`);\n    return {\n      driver: data.MRData.DriverTable.Drivers[0],\n      races: resultsData.MRData.RaceTable.Races,\n    };\n  },\n};\n","import React, { Component } from 'react';\nimport { Container, Table, Pagination, Message } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as drivers from '../../actions/drivers';\n\nclass DriverListPage extends Component {\n  componentDidMount() {\n    this.props.loadDrivers(this.getCurrentPage());\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.match.params.page_num !== this.props.match.params.page_num) {\n      this.props.loadDrivers(this.getCurrentPage());\n    }\n  }\n  handlePageChange = pageNumber => {\n    this.props.history.push(`/drivers/page/${pageNumber}`);\n  };\n\n  getCurrentPage() {\n    return this.props.match.params.page_num || 1;\n  }\n  render() {\n    const { drivers, totalPages, loading, error } = this.props;\n    const currentPage = this.getCurrentPage();\n    return (\n      <Container>\n        {loading && <div>Loading...</div>}\n        {error && (\n          <Message error>\n            <p>{error}</p>\n          </Message>\n        )}\n\n        {!loading && (\n          <div>\n            <Table basic=\"very\">\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Name</Table.HeaderCell>\n                  <Table.HeaderCell>Nationality</Table.HeaderCell>\n                  <Table.HeaderCell>Wikipedia link</Table.HeaderCell>\n                  <Table.HeaderCell>Birthdate</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                {drivers.map(driver => (\n                  <Table.Row key={driver.driverId}>\n                    <Table.Cell>\n                      <Link to={`/drivers/${driver.driverId}`}>\n                        {driver.givenName} {driver.familyName}\n                      </Link>\n                    </Table.Cell>\n                    <Table.Cell>{driver.nationality}</Table.Cell>\n                    <Table.Cell>\n                      <a href={driver.url}>{driver.url}</a>\n                    </Table.Cell>\n                    <Table.Cell>{driver.dateOfBirth}</Table.Cell>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n            <Pagination\n              defaultActivePage={currentPage}\n              totalPages={totalPages}\n              onPageChange={e => {\n                this.handlePageChange(e.target.attributes.value.value);\n              }}\n            />\n          </div>\n        )}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  drivers: state.drivers.drivers,\n  totalPages: state.drivers.totalPages,\n  loading: state.drivers.loading,\n  error: state.drivers.error,\n});\n\nexport default connect(\n  mapStateToProps,\n  { loadDrivers: drivers.loadDrivers },\n)(DriverListPage);\n","import api from '../api';\nimport {\n  LOAD_DRIVERS_REQUEST,\n  LOAD_DRIVERS_SUCCESS,\n  LOAD_DRIVERS_ERROR,\n  LOAD_DRIVER_DETAIL_REQUEST,\n  LOAD_DRIVER_DETAIL_SUCCESS,\n  LOAD_DRIVER_DETAIL_ERROR,\n} from '../types';\n\nexport const loadDrivers = currentPage => dispatch => {\n  dispatch({\n    type: LOAD_DRIVERS_REQUEST,\n  });\n\n  api\n    .driversList(currentPage)\n    .then(({ drivers, totalPages }) => {\n      dispatch({\n        type: LOAD_DRIVERS_SUCCESS,\n        drivers,\n        totalPages,\n      });\n    })\n    .catch(e => {\n      dispatch({\n        type: LOAD_DRIVERS_ERROR,\n        error: e.message || 'Internal server error',\n      });\n    });\n};\n\nexport const loadDriverDetail = driverId => dispatch => {\n  dispatch({\n    type: LOAD_DRIVER_DETAIL_REQUEST,\n  });\n\n  api\n    .loadDriverDetail(driverId)\n    .then(({ driver, races }) => {\n      dispatch({\n        type: LOAD_DRIVER_DETAIL_SUCCESS,\n        driver,\n        races,\n      });\n    })\n    .catch(e => {\n      dispatch({\n        type: LOAD_DRIVER_DETAIL_ERROR,\n        error: e.message || 'Internal server error',\n      });\n    });\n};\n","import React, { Component } from 'react';\nimport { Container, Table, Message } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport * as drivers from '../../actions/drivers';\n\nclass DriverDetailPage extends Component {\n  componentDidMount() {\n    this.props.loadDriverDetail(this.props.match.params.driver_id);\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.match.params.driver_id !== this.props.match.params.driver_id) {\n      this.loadDriverDetail(this.props.match.params.driver_id);\n    }\n  }\n  handlePageChange = pageNumber => {\n    this.props.history.push(`/drivers/pages/${pageNumber}`);\n  };\n  render() {\n    const { driver, races, loading, error } = this.props;\n    return (\n      <Container>\n        {loading && <div>Loading...</div>}\n        {error && (\n          <Message error>\n            <p>{error}</p>\n          </Message>\n        )}\n        {!loading &&\n          driver && (\n            <div>\n              <h2>\n                {driver.givenName} {driver.familyName}\n              </h2>\n              <div>Nationality: {driver.nationality}</div>\n              <div>Birthdate: {driver.dateOfBirth}</div>\n              <a href={driver.url}>Wikipedia link</a>\n\n              <h3>Races</h3>\n              <Table basic=\"very\">\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Race name</Table.HeaderCell>\n                    <Table.HeaderCell>Position</Table.HeaderCell>\n                    <Table.HeaderCell>Season</Table.HeaderCell>\n                    <Table.HeaderCell>Date</Table.HeaderCell>\n\n                    <Table.HeaderCell>Wikipedia link</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  {races &&\n                    races.map(race => (\n                      <Table.Row>\n                        <Table.Cell>{race.raceName}</Table.Cell>\n                        <Table.Cell>{race.round}</Table.Cell>\n                        <Table.Cell>{race.season}</Table.Cell>\n                        <Table.Cell>{race.date}</Table.Cell>\n                        <Table.Cell>\n                          <a href={race.url}>{race.url}</a>\n                        </Table.Cell>\n                      </Table.Row>\n                    ))}\n                </Table.Body>\n              </Table>\n            </div>\n          )}\n      </Container>\n    );\n  }\n}\nconst mapStateToProps = (state, props) => {\n  return {\n    loading: state.drivers.loading,\n    error: state.drivers.error,\n    driver: state.drivers.driver,\n    races: state.drivers.races,\n  };\n};\nexport default connect(\n  mapStateToProps,\n  { loadDriverDetail: drivers.loadDriverDetail },\n)(DriverDetailPage);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport { Route, Switch } from 'react-router';\nimport { Container, Menu } from 'semantic-ui-react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport DriverListPage from './components/pages/DriverListPage';\nimport DriverDetailPage from './components/pages/DriverDetailPage';\n\nconst App = () => (\n  <Provider store={store}>\n    <BrowserRouter basename=\"/f1-frontend\">\n      <div>\n        <Container>\n          <Menu secondary pointing>\n            <Menu.Item name=\"drivers\" active={true} as={Link} to=\"/\">\n              Drivers list\n            </Menu.Item>\n          </Menu>\n          <br />\n        </Container>\n        <Switch>\n          <Route exact path=\"/\" component={DriverListPage} />\n          <Route path=\"/drivers/page/:page_num\" component={DriverListPage} />\n          <Route path=\"/drivers/:driver_id\" component={DriverDetailPage} />\n          <Route path=\"/drivers/:driver_id/page/:page_num\" component={DriverDetailPage} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}